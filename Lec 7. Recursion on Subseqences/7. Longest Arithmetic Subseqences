https://leetcode.com/problems/longest-arithmetic-subsequence/submissions/

class Solution {
public:
    int solve(vector<int>& nums, int i, int diff){
        //base case
        if(i<0)
            return 0;
        
        int ans = 0;
        //backward check
        for(int k=i-1; k>=0; k--){
            if(nums[i] - nums[k] == diff){
                ans = max(ans, 1 + solve(nums, k, diff));
            }
        }
        
        return ans;
        
    }
    
    int longestArithSeqLength(vector<int>& nums) {
        int n = nums.size();
        int ans = 0;
        
        for(int i=0; i<n; i++){
            for(int j=i+1; j<n; j++){
                int diff = nums[j]-nums[i];
                ans = max(ans, 2+solve(nums, i, diff));
            }
        }
        
        return ans;

    }
};

TC : exponential
SC : O(n)

*************************************************
bhaiya ka code

#include<iostream>
using namespace std;

int solve(int i, int arr[], int diff) {
    if(i < 0)
        return 0;
    
    int ans = 0;
    
    //backward check
    for(int k = i-1; k>=0; k--) {
        if(arr[i] - arr[k] == diff) {
            //number in AP found
            ans = max(ans, 1 + solve(k, arr, diff));
        }
    }
    return ans;
}

int main() {

    int arr[] = {9,4,7,2,10};
    int size = 5;

    int ans = 0;

    for(int i=0; i<size; i++) {
        for(int j=i+1; j<size; j++) {
            int difference = arr[j] - arr[i];
            //catch here: add 2 for elements rep. by ith and jth index
            ans = max(ans, 2 + solve(i,arr,difference));
        }
    }

    cout << "Printing ans  " << ans << endl;
   
    return 0;
}
